/* automatically generated by rust-bindgen */

pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const DISCORD_REPLY_NO: u32 = 0;
pub const DISCORD_REPLY_YES: u32 = 1;
pub const DISCORD_REPLY_IGNORE: u32 = 2;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    #[link_name = "\u{1}__security_cookie"]
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiscordRichPresence {
    pub state: *const ::std::os::raw::c_char,
    pub details: *const ::std::os::raw::c_char,
    pub startTimestamp: i64,
    pub endTimestamp: i64,
    pub largeImageKey: *const ::std::os::raw::c_char,
    pub largeImageText: *const ::std::os::raw::c_char,
    pub smallImageKey: *const ::std::os::raw::c_char,
    pub smallImageText: *const ::std::os::raw::c_char,
    pub partyId: *const ::std::os::raw::c_char,
    pub partySize: ::std::os::raw::c_int,
    pub partyMax: ::std::os::raw::c_int,
    pub matchSecret: *const ::std::os::raw::c_char,
    pub joinSecret: *const ::std::os::raw::c_char,
    pub spectateSecret: *const ::std::os::raw::c_char,
    pub instance: i8,
}
#[test]
fn bindgen_test_layout_DiscordRichPresence() {
    assert_eq!(
        ::std::mem::size_of::<DiscordRichPresence>(),
        112usize,
        concat!("Size of: ", stringify!(DiscordRichPresence))
    );
    assert_eq!(
        ::std::mem::align_of::<DiscordRichPresence>(),
        8usize,
        concat!("Alignment of ", stringify!(DiscordRichPresence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).details as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(details)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordRichPresence>())).startTimestamp as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(startTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordRichPresence>())).endTimestamp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(endTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordRichPresence>())).largeImageKey as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(largeImageKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordRichPresence>())).largeImageText as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(largeImageText)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordRichPresence>())).smallImageKey as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(smallImageKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordRichPresence>())).smallImageText as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(smallImageText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).partyId as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(partyId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).partySize as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(partySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).partyMax as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(partyMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).matchSecret as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(matchSecret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).joinSecret as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(joinSecret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordRichPresence>())).spectateSecret as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(spectateSecret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordRichPresence>())).instance as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordRichPresence),
            "::",
            stringify!(instance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiscordJoinRequest {
    pub userId: *const ::std::os::raw::c_char,
    pub username: *const ::std::os::raw::c_char,
    pub discriminator: *const ::std::os::raw::c_char,
    pub avatar: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DiscordJoinRequest() {
    assert_eq!(
        ::std::mem::size_of::<DiscordJoinRequest>(),
        32usize,
        concat!("Size of: ", stringify!(DiscordJoinRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<DiscordJoinRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(DiscordJoinRequest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordJoinRequest>())).userId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordJoinRequest),
            "::",
            stringify!(userId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordJoinRequest>())).username as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordJoinRequest),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordJoinRequest>())).discriminator as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordJoinRequest),
            "::",
            stringify!(discriminator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordJoinRequest>())).avatar as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordJoinRequest),
            "::",
            stringify!(avatar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiscordEventHandlers {
    pub ready: ::std::option::Option<unsafe extern "C" fn()>,
    pub disconnected: ::std::option::Option<
        unsafe extern "C" fn(
            errorCode: ::std::os::raw::c_int,
            message: *const ::std::os::raw::c_char,
        ),
    >,
    pub errored: ::std::option::Option<
        unsafe extern "C" fn(
            errorCode: ::std::os::raw::c_int,
            message: *const ::std::os::raw::c_char,
        ),
    >,
    pub joinGame:
        ::std::option::Option<unsafe extern "C" fn(joinSecret: *const ::std::os::raw::c_char)>,
    pub spectateGame:
        ::std::option::Option<unsafe extern "C" fn(spectateSecret: *const ::std::os::raw::c_char)>,
    pub joinRequest:
        ::std::option::Option<unsafe extern "C" fn(request: *const DiscordJoinRequest)>,
}
#[test]
fn bindgen_test_layout_DiscordEventHandlers() {
    assert_eq!(
        ::std::mem::size_of::<DiscordEventHandlers>(),
        48usize,
        concat!("Size of: ", stringify!(DiscordEventHandlers))
    );
    assert_eq!(
        ::std::mem::align_of::<DiscordEventHandlers>(),
        8usize,
        concat!("Alignment of ", stringify!(DiscordEventHandlers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordEventHandlers>())).ready as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordEventHandlers),
            "::",
            stringify!(ready)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordEventHandlers>())).disconnected as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordEventHandlers),
            "::",
            stringify!(disconnected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordEventHandlers>())).errored as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordEventHandlers),
            "::",
            stringify!(errored)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscordEventHandlers>())).joinGame as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordEventHandlers),
            "::",
            stringify!(joinGame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordEventHandlers>())).spectateGame as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordEventHandlers),
            "::",
            stringify!(spectateGame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiscordEventHandlers>())).joinRequest as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscordEventHandlers),
            "::",
            stringify!(joinRequest)
        )
    );
}
extern "C" {
    pub fn Discord_Initialize(
        applicationId: *const ::std::os::raw::c_char,
        handlers: *mut DiscordEventHandlers,
        autoRegister: ::std::os::raw::c_int,
        optionalSteamId: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Discord_Shutdown();
}
extern "C" {
    pub fn Discord_RunCallbacks();
}
extern "C" {
    pub fn Discord_UpdatePresence(presence: *const DiscordRichPresence);
}
extern "C" {
    pub fn Discord_ClearPresence();
}
extern "C" {
    pub fn Discord_Respond(userid: *const ::std::os::raw::c_char, reply: ::std::os::raw::c_int);
}
